   - name: Get branch name
         id: vars
         run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

       - name: Download stage task definition
         if: ${{ env.BRANCH == 'staging' }}
         id: download-stage-task-def
         env:
          ECS_TASK: ${{ env.ECS_STAGE_TASK }}
          ECS_SERVICE: ${{ env.ECS_STAGE_SERVICE }}
          CONTAINER_NAME: ${{ env.CONTAINER_STAGE_NAME }}
         run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK --query taskDefinition > task-definition.json
          echo "ECS_SERVICE=${{ env.ECS_STAGE_SERVICE }}" >> $GITHUB_ENV
          echo "ECS_TASK=${{ env.ECS_STAGE_TASK }}" >> $GITHUB_ENV
          echo "ECS_CLUSTER=${{ env.ECS_STAGE_CLUSTER }}" >> $GITHUB_ENV
          echo "CONTAINER_NAME=${{ env.CONTAINER_STAGE_NAME }}" >> $GITHUB_ENV

       - name: Download prod task definition
         if: ${{ env.BRANCH == 'production' }}
         id: download-prod-task-def
         env:
          ECS_TASK: ${{ env.ECS_PROD_TASK }}
          ECS_SERVICE: ${{ env.ECS_PROD_SERVICE }}
          CONTAINER_NAME: ${{ env.CONTAINER_PROD_NAME }}
         run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK --query taskDefinition > task-definition.json
          echo "ECS_SERVICE=${{ env.ECS_PROD_SERVICE }}" >> $GITHUB_ENV
          echo "ECS_TASK=${{ env.ECS_PROD_TASK }}" >> $GITHUB_ENV
          echo "ECS_CLUSTER=${{ env.ECS_PROD_CLUSTER }}" >> $GITHUB_ENV
          echo "CONTAINER_NAME=${{ env.CONTAINER_PROD_NAME }}" >> $GITHUB_ENV

       - name: Fill in the new image ID in the Amazon ECS task definition
         id: task-def
         uses: aws-actions/amazon-ecs-render-task-definition@v1
         with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

       - name: Deploy Amazon ECS task definition
         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
         with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true